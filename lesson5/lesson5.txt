Цель задания будет общая, но каждый будет работать над своим кусочком.

Будем реализовать тест Среднее квадратичное отклонение трасс.

Для работы на задачей создайте ветку SKO, и все работы проводить в ней.

1. Реализовать алгоритм вычеслений СКО, результатом работы алгоритма должен быть файл json имеющий структуру как в файле example.json
Алгоритм должен быть адаптирован под работу с разными приборами от 1 до 16 портов.
Файл с алгоритмом назвать sko.py файл с результатами sko_result.json

Измерение СКО трасс T11, R11, S11, с частотами фильтра ПЧ: 3 кГц, 300 кГц; аттенюаторами: 10, 30, 50 дБ.

Установить трассы T11, R11, S11, T22, R22, S22... (Устанавливать и измерять либо по очереди, либо все вместе, как удобно)

Установить фильтр ПЧ 300 кГц

Частотный план "SERVice:SWEep:FREQuency:FACTory"

Attenuator control – вкл. Аттенюатор 10 дБ. "SERVice:RFCTL:POWer:STATe 1" SERVice:RFCTL:POWer:ATT 10

установить Код ЦАП.  АЧХ SERV:RFCTL:POW:DAC 6554

Дождаться пока пройдет росчерк трасс

Сделать нормализацию для каждой трассы:

Trace → memory → add memory trace и Math→ data/mem

Сделать измерения, посчитать СКО для каждой трассы (сделать проход посчитать СКО, и так для каждой трассы) (s.dev из математической статистики)

Установить фильтр 3 кГц повторить измерения

Повторить расчет ско для Аттенюатора 30 дБ и 50 дБ
#Также необходимо следить за максимальным ско, и обновлять информацию по нему.

2.Реализовать рисование таблицы(html), входные данные будет файл со структурой example.json
Алгоритм рисования таблицы должен быть динамическим, для разного колличества портов
Файл с кодом назвать sko_table.py файл с таблицей sko_result.html

Структура таблицы в файлу table.png (если кажется,что структура не подходит можно изменить)

Перед рисованием таблицы, нужно попросить пользователя указать допуски для абсолютных и для относительных трасс.
Во время рисования таблицы проверять значение ско на соответсвие допускам
Если значение выше чем допуск помечать ячейку таблицы желтым цветом.